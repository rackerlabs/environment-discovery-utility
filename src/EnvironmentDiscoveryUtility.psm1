function Start-EnvironmentDiscovery
{
    <#

        .SYNOPSIS
            This cmdlet will start a run of the Environment Discovery Utility.  

        .DESCRIPTION
            This cmdlet will start a run of the Environment Discovery Utility.  This utility gathers important information regarding Microsoft products for the purpose of evaluating customer environments to aid in the scoping of projects.

        .OUTPUTS
            A JSON representation of the discovered environment.

        .EXAMPLE
            Start-EnvironmentDiscovery -Modules All -OutputFolder c:\temp

        .EXAMPLE
            Start-EnvironmentDiscovery -Modules Exchange,AD -OutputFolder c:\temp -SkipDnsLookups

    #>

    [CmdletBinding()]
    param (
        # An array of strings indicating which modules the Environment Discovery Utility should run.  Possible values: AD, Exchange, ExchangeOnline, All.  This defaults to "AD", "Exchange"
        [ValidateSet("ad","exchange","exchangeonline","azuread","all")]
        [array]
        $Modules = @("all"),

        # Switch used to skip performing DNS lookups
        [Parameter(Mandatory=$false)]
        [switch]
        $SkipDnsLookups,

        # A string to designate the file path to place all files generated by EDU. This defaults to the Users desktop file location
        [Parameter(Mandatory=$false)]
        [string]
        $OutputFolder = "$((Get-Location).Path)",

        # The Cloud Administrator Credential.  This helps reduce prompts.
        [Parameter(Mandatory=$false)]
        [System.Management.Automation.PSCredential]
        $CloudCredential
    )

    begin
    {
        Clear-Host

        $environmentName = (Get-WmiObject Win32_ComputerSystem).Domain.ToLower()
        $powershellVersion = [string]$PSVersionTable.PSVersion
        $netVersion = [string]$PSVersionTable.CLRVersion
        $tempFolder = "$env:USERPROFILE\AppData\Local\Temp"
        $sessionGuid = [GUID]::NewGuid()
        $environmentDiscoveryUtilityModule = Get-Module -Name EnvironmentDiscoveryUtility

        $logPath = "$($OutputFolder)\edu-$environmentName.log"
        $jsonPath = "$($OutputFolder)\edu-$environmentName.json"

        try
        {
            Enable-Logging $logPath -Verbose:$VerbosePreference -Debug:$DebugPreference
        }
        catch 
        {
            Write-Error "Failed to enable logging check to ensure $tempFolder exists and the account has write permissions. $($_.Exception.Message)" -ErrorAction Stop
        }

        $environment = @{}
        $environment.Add("SessionId", $sessionGuid)
        $environment.Add("TimeStamp", $(([DateTime]::UtcNow | Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")))
        $environment.Add("Version",$environmentDiscoveryUtilityModule.Version)

        Write-Log -Level "INFO" -Activity "Setup" -Message "Modules: $Modules"
        Write-Log -Level "INFO" -Activity "Setup" -Message "Output Folder: $OutputFolder"
        Write-Log -Level "INFO" -Activity "Setup" -Message "Environment Name: $environmentName"
        Write-Log -Level "INFO" -Activity "Setup" -Message "Session GUID: $sessionGuid"
        Write-Log -Level "INFO" -Activity "Setup" -Message "Temp Folder: $tempFolder"
        Write-Log -Level "INFO" -Activity "Setup" -Message "Log Path: $logPath"
        Write-Log -Level "INFO" -Activity "Setup" -Message "JSON Path: $jsonPath"
        Write-Log -Level "INFO" -Activity "Setup" -Message "VebosePreference: $VerbosePreference"
        Write-Log -Level "INFO" -Activity "Setup" -Message "DebugPreference: $DebugPreference"
        Write-Log -Level "INFO" -Activity "Setup" -Message "PowerShell Version: $powershellVersion"
        Write-Log -Level "INFO" -Activity "Setup" -Message ".NET Version: $netVersion"
    }
    process
    {
        $allModules = @("azuread","exchangeonline","ad","exchange")
        $modulesRequireAuth = @("exchangeonline", "azuread")

        Write-Log -Level "INFO" -Message "Initializing EDU Module $($environmentDiscoveryUtilityDetails.Version)" -Activity "Environment Discovery Utility" -WriteProgress

        foreach ($module in $modulesRequireAuth)
        {
            if (($Modules -like "all") -or ($Modules -contains $module))
            {
                switch ($module)
                {
                    "azuread"
                    {
                        $azureADObject = Initialize-AzureADPowershell -Credential $CloudCredential
                    }
                    "exchangeonline"
                    {
                        Clear-Host
                        Write-Output "Initializing Exchange Online Powershell.  Provide provide adminsitrator access if prompted."
                        $exchangeOnlineObject = Initialize-ExoPowershell -Credential $CloudCredential
                    }
                }
            }
        }

        foreach ($module in $allModules)
        {
            Write-Log -Level "INFO" -Message "Executing $($module.ToUpper()) Module." -Activity "Environment Discovery Utility"

            if (($Modules -like "all") -or ($Modules -contains $module))
            {
                switch ($module)
                {
                    "azuread"
                    {
                        $azureADObject = Start-AzureADDiscovery
                        $environment.Add("AzureAD",$azureADObject)
                    }
                    "exchangeonline"
                    {
                        $exchangeOnlineObject = Start-ExchangeOnlineDiscovery
                        $environment.Add("ExchangeOnline",$exchangeOnlineObject)
                    }
                    "ad"
                    {
                        $activeDirectoryObject = Start-ActiveDirectoryDiscovery

                        if ($activeDirectoryObject.Count -ne 0)
                        {
                            $environment.Add("ActiveDirectory",$activeDirectoryObject)
                        }
                    }
                    "exchange"
                    {
                        $exchangeObject = Start-ExchangeDiscovery -SkipDnsLookups:$SkipDnsLookups

                        if ($exchangeObject.Count -ne 0)
                        {
                            $environment.Add("Exchange",$exchangeObject)
                        }
                    }
                }
            }
        }

        Write-Log -Level "INFO" -Message "Packaging EDU Results" -Activity "Environment Discovery Utility" -WriteProgress
        $environment.Add("Log",$Global:logEntries)

        if (Test-Path $jsonPath)
        {
            Remove-Item $jsonPath -Force
        }

        $environment | SerializeTo-Json -Verbose:$False -Debug:$DebugPreference | Set-Content -Path $jsonPath -Encoding UTF8 -Force

        try 
        {
            Write-Output "Zipping results of Environment Discovery"
            $zipFile = New-ZipFile -OutputFolder $OutputFolder -Files "$jsonPath","$logPath" -EnvironmentName $environmentName
            Write-Output "Zip file created at $zipFile."
        }
        catch 
        {
            Write-Error "Zip function failed to create zip file. Files are located in $tempFolder. $($_.Exception)" -ErrorAction Stop
        }
    }
    end
    {
        Write-EduSummary
        Disable-Logging
        Write-Output "Removing files from temp location."
        Remove-Item $jsonPath -Force
        Write-Output "Cleanup completed."
    }
}

function Write-EduSummary
{
    $activities = @()

    $logItems = Get-LogEntries | Where-Object {$_.Activity -ne "StreamInterception"}

    foreach ($item in $logItems)
    {
        if ($activities -notcontains $item.Activity)
        {
            $activities += $item.Activity
        }
    }

    Write-Host "=== Activity Summary ==="
    foreach ($activity in $activities)
    {
        [array]$activityLogs = $logEntries | Where-Object {$_.Activity -eq $activity}
        [array]$errors = $activityLogs | Where-Object {$_.Level -eq "ERROR"}
        [array]$warnings = $activityLogs | Where-Object {$_.Level -eq "WARNING"}

        if ($errors)
        {
            Write-Host "[ERROR]   " -ForegroundColor Red -NoNewline
        }
        elseif ($warnings)
        {
            Write-Host "[WARNING] " -ForegroundColor Yellow -NoNewline
        }
        else
        {
            Write-Host "[SUCCESS] " -ForegroundColor Green -NoNewline
        }

        Write-Host $activity -NoNewline

        if ($warnings)
        {
            Write-Host " (Warnings: $($warnings.Count))"
        }
        else
        {
            Write-Host
        }

        if ($errors)
        {
            foreach ($lineError in $errors)
            {
                Write-Host "`t`t$($lineError.Message)"
            }
        }
    }
}

New-Alias -Name "sedu" -Value "Start-EnvironmentDiscovery" -Description "Alias for Start-EnvironmentDiscovery" -Scope Global