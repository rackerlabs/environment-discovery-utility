#!/usr/bin/env groovy
pipeline {
    agent any
    parameters {
        string(name: 'branch', defaultValue: 'develop', description: '')
        string(name: 'slackChannel', defaultValue: 'edu-cicd', description: '')
        booleanParam(name: 'testOneEnabled', defaultValue: true, description: 'Single-domain / 2010 / v2')
        booleanParam(name: 'testTwoEnabled', defaultValue: true, description: 'Single-domain / 2013/2016 / v4 / JML')
        booleanParam(name: 'testThreeEnabled', defaultValue: true, description: 'Multi-domain / 2013 / v4')
    }
    environment {
        SLACK_PREFIX = "${env.JOB_NAME} - [${branch}] - #${env.BUILD_NUMBER}"
        TEST_1 = 'Single-domain / 2010 / v2'
        TEST_2 = 'Single-domain / 2013/2016 / v4 / JML'
        TEST_3 = 'Multi-domain / 2013 / v4'
        TEST_1_IP = credentials('feab5ed9-07d6-4425-bf6a-2dca1c133647')
        TEST_2_IP = credentials('1754a6f7-f7d4-47b3-9063-60f4321eaf24')
        TEST_3_IP = credentials('4eaf24a2-579c-4339-a19a-ecc7634492fa')
    }
    stages {
        stage('Setup') {
            steps {
                slackSend channel: "${slackChannel}", message: "${SLACK_PREFIX} Started (<${env.BUILD_URL}|View Build Output>)."

                checkout (
                    changelog: true,
                    poll: true,
                    scm: [ 
                        $class: 'GitSCM', 
                        branches: [[name: "master"]], 
                        doGenerateSubmoduleConfigurations: false, 
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'build\\tools']] + [[$class: 'CleanCheckout']],
                        submoduleCfg: [], 
                        userRemoteConfigs: [[credentialsId: 'james.blake', url: 'git@github.rackspace.com:MicrosoftEng/build-tools.git']]
                    ]
                )
            }
        }
        stage('Sign') {
            steps {
                slackSend channel: "${slackChannel}", message: "${SLACK_PREFIX} Signing script files."

                withCredentials([
                    usernamePassword(credentialsId: '1e14ecee-ea70-4dc9-b1a6-7946fab6c8bb', passwordVariable: 'password', usernameVariable: 'username'),
                    file(credentialsId: '9dc4abad-d55c-4621-a70c-d73b1803d6fe', variable: 'certificate'),
                ]) {
                    bat """powershell.exe -ExecutionPolicy Unrestricted -Command .\\build\\Sign-ScriptFiles.ps1 -Password '%password%' -Username '%username%' -certificate %certificate%"""
                }
            }
        }
        stage('Zip') {
            steps {
                slackSend channel: "${slackChannel}", message: "${SLACK_PREFIX} Zipping files."

                bat 'powershell.exe -ExecutionPolicy Unrestricted -Command .\\build\\New-ZipFile.ps1 -BuildNumber %BUILD_NUMBER%'
            }
        }
        stage('Run Tests') {
            parallel {
                stage('Single-domain 2010 v2') {
                    when {
                        expression { params.testOneEnabled == true }
                    }
                    steps {
                        slackSend channel: "${slackChannel}", message: "${SLACK_PREFIX} Running ${env.TEST_1} tests."

                        withCredentials([
                            usernamePassword(credentialsId: '03bbc260-f717-48f0-b16a-c97ba14e6d85', passwordVariable: 'password', usernameVariable: 'username')
                        ]) {
                            bat 'powershell.exe -ExecutionPolicy Unrestricted -Command .\\build\\Invoke-RemoteTesting.ps1 -BuildNumber %BUILD_NUMBER% -LabIpAddress %TEST_1_IP% -Password %password% -Username %username% -EduZipFile .\\build\\edu.v%BUILD_NUMBER%.zip'
                        }

                        slackSend channel: "${slackChannel}", color: 'good',  message: "${SLACK_PREFIX} ${env.TEST_1} tests successful."
                    }
                    post {
                        success {
                            archiveArtifacts artifacts: "build/${env.TEST_1_IP}/edu-${env.TEST_1_IP}.zip"                            
                            slackSend channel: "${slackChannel}", color: 'good', message: "${SLACK_PREFIX} ${env.TEST_1} results: (<https://jenkins.mseng.mlsrvr.com/view/EDU/job/edu_ci/${env.BUILD_NUMBER}/artifact/build/${env.TEST_1_IP}/edu-${env.TEST_1_IP}.zip|Download Zip>)."
                        }
                        failure {                         
                            slackSend channel: "${slackChannel}", color: 'danger', message: "${SLACK_PREFIX} ${env.TEST_1} failed, attempting to retrieve log output."

                            withCredentials([
                                usernamePassword(credentialsId: '03bbc260-f717-48f0-b16a-c97ba14e6d85', passwordVariable: 'password', usernameVariable: 'username')
                            ]) {
                                bat 'powershell.exe -ExecutionPolicy Unrestricted -Command .\\build\\Copy-Logs.ps1 -BuildNumber %BUILD_NUMBER% -LabIpAddress %TEST_1_IP% -Password %password% -Username %username%'
                            }                            
                            
                            archiveArtifacts artifacts: "build/${env.TEST_1_IP}/${env.TEST_1_IP}.log"    
                            slackSend channel: "${slackChannel}", color: 'danger', message: "${SLACK_PREFIX} ${env.TEST_1} logs: (<https://jenkins.mseng.mlsrvr.com/view/EDU/job/edu_ci/${env.BUILD_NUMBER}/artifact/build/${env.TEST_1_IP}/${env.TEST_1_IP}.log|View Logs>)."
                        }
                    }
                }
                stage('Single-domain 2013/2016 v4 JML') {
                    when {
                        expression { params.testTwoEnabled == true }
                    }
                    steps {
                        slackSend channel: "${slackChannel}", message: "${SLACK_PREFIX} Running ${env.TEST_2} tests."

                        withCredentials([
                            usernamePassword(credentialsId: '5de43889-57c2-41ad-a17b-06cf6eb92ffd', passwordVariable: 'password', usernameVariable: 'username')
                        ]) {
                            bat 'powershell.exe -ExecutionPolicy Unrestricted -Command .\\build\\Invoke-RemoteTesting.ps1 -BuildNumber %BUILD_NUMBER% -LabIpAddress %TEST_2_IP% -Password %password% -Username %username% -EduZipFile .\\build\\edu.v%BUILD_NUMBER%.zip'
                        }

                        slackSend channel: "${slackChannel}", color: 'good', message: "${SLACK_PREFIX} ${env.TEST_2} tests successful." 
                    }
                    post { 
                        success {
                            archiveArtifacts artifacts: "build/${env.TEST_2_IP}/edu-${env.TEST_2_IP}.zip"                         
                            slackSend channel: "${slackChannel}", color: 'good', message: "${SLACK_PREFIX} Single-domain / 2013/2016 / v4 / JML results: (<https://jenkins.mseng.mlsrvr.com/view/EDU/job/edu_ci/${env.BUILD_NUMBER}/artifact/build/${env.TEST_2_IP}/edu-${env.TEST_2_IP}.zip|Download Zip>)."
                        }
                        failure { 
                            slackSend channel: "${slackChannel}", color: 'danger', message: "${SLACK_PREFIX} ${env.TEST_2} failed, attempting to retrieve log output."

                            withCredentials([
                                usernamePassword(credentialsId: '5de43889-57c2-41ad-a17b-06cf6eb92ffd', passwordVariable: 'password', usernameVariable: 'username')
                            ]) {
                                bat 'powershell.exe -ExecutionPolicy Unrestricted -Command .\\build\\Copy-Logs.ps1 -BuildNumber %BUILD_NUMBER% -LabIpAddress %TEST_2_IP% -Password %password% -Username %username%'
                            }  
                            
                            archiveArtifacts artifacts: "build/${env.TEST_2_IP}/${env.TEST_2_IP}.log"    
                            slackSend channel: "${slackChannel}", color: 'danger', message: "${SLACK_PREFIX} ${env.TEST_2} logs: (<https://jenkins.mseng.mlsrvr.com/view/EDU/job/edu_ci/${env.BUILD_NUMBER}/artifact/build/${env.TEST_2_IP}/${env.TEST_2_IP}.log|View Logs>)."
                        }
                    }
                }
                stage('Multi-domain 2013 v4') {
                    when {
                        expression { params.testThreeEnabled == true }
                    }
                    steps {
                        slackSend channel: "${slackChannel}", message: "${SLACK_PREFIX} Running ${env.TEST_3} tests."

                        withCredentials([
                            usernamePassword(credentialsId: 'f344bfd0-63dd-4426-92dd-4e9016e0c526', passwordVariable: 'password', usernameVariable: 'username')
                        ]) {
                            bat 'powershell.exe -ExecutionPolicy Unrestricted -Command .\\build\\Invoke-RemoteTesting.ps1 -BuildNumber %BUILD_NUMBER% -LabIpAddress %TEST_3_IP% -Password %password% -Username %username% -EduZipFile .\\build\\edu.v%BUILD_NUMBER%.zip'
                        }

                        slackSend channel: "${slackChannel}", color: 'good', message: "${SLACK_PREFIX} ${env.TEST_3} tests successful." 
                    }
                    post { 
                        success {
                            archiveArtifacts artifacts: "build/${env.TEST_3_IP}/edu-${env.TEST_3_IP}.zip"                           
                            slackSend channel: "${slackChannel}", color: 'good', message: "${SLACK_PREFIX} Multi-domain / 2013 / v4 results: (<https://jenkins.mseng.mlsrvr.com/view/EDU/job/edu_ci/${env.BUILD_NUMBER}/artifact/build/${env.TEST_3_IP}/edu-${env.TEST_3_IP}.zip|Download Zip>)."
                        }
                        failure { 
                            slackSend channel: "${slackChannel}", color: 'danger', message: "${SLACK_PREFIX} ${env.TEST_3} failed, attempting to retrieve log output."

                            withCredentials([
                                usernamePassword(credentialsId: 'f344bfd0-63dd-4426-92dd-4e9016e0c526', passwordVariable: 'password', usernameVariable: 'username')
                            ]) {
                                bat 'powershell.exe -ExecutionPolicy Unrestricted -Command .\\build\\Copy-Logs.ps1 -BuildNumber %BUILD_NUMBER% -LabIpAddress %TEST_3_IP% -Password %password% -Username %username%'
                            }     
                            
                            archiveArtifacts artifacts: "build/${env.TEST_3_IP}/${env.TEST_3_IP}.log"    
                            slackSend channel: "${slackChannel}", color: 'danger', message: "${SLACK_PREFIX} ${env.TEST_3} logs: (<https://jenkins.mseng.mlsrvr.com/view/EDU/job/edu_ci/${env.BUILD_NUMBER}/artifact/build/${env.TEST_3_IP}/${env.TEST_3_IP}.log|View Logs>)."
                        }
                    }
                }
            }
        }

    }
    post {
        success {		
            archiveArtifacts artifacts: "build/edu.v${env.BUILD_NUMBER}.zip"

            slackSend channel: "${slackChannel}", color: 'good', message: "${SLACK_PREFIX} All tests were successful (<${env.BUILD_URL}|View Build Output>)."
            slackSend channel: "${slackChannel}", color: 'good', message: "${SLACK_PREFIX} Distributable: (<https://jenkins.mseng.mlsrvr.com/view/EDU/job/edu_ci/${env.BUILD_NUMBER}/artifact/build/edu.v${env.BUILD_NUMBER}.zip|Download Zip>)."
        }
        failure {
            slackSend channel: "${slackChannel}", color: 'danger', message: "${SLACK_PREFIX} Failure (<${env.BUILD_URL}|View Console Output>)."
        }
    }
}
