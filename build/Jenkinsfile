#!/usr/bin/env groovy

def handleLabFailure = {
    credentialsId,
    ipAddress,
    labPrefix ->

    slackSend(channel: "${slackChannel}", color: 'warning', message: "${labPrefix} Script failed, attempting to retrieve logs.")

    try {          
        withCredentials([
            usernamePassword(credentialsId: credentialsId, passwordVariable: 'password', usernameVariable: 'username')
        ]) {
            bat("powershell.exe -ExecutionPolicy Unrestricted -Command .\\build\\Copy-Logs.ps1 -BuildNumber %BUILD_NUMBER% -LabIpAddress ${ipAddress} -Password %password% -Username %username%")
        }  
    } catch (e) {    
        slackSend(channel: "${slackChannel}", color: 'warning', message: "${labPrefix} Unable to retreieve logs.")
        return
    }            
    
    archiveArtifacts(artifacts: "build/${ipAddress}/${ipAddress}.log")
    slackSend(channel: "${slackChannel}", color: 'danger', message: "${labPrefix} Script failed, please review the <${logUrl}|log file> and <${env.BUILD_URL}|build output> for more details.")                                
}

def invokeTest = {
    credentialsId,
    environment,
    ipAddress ->

    def labPrefix = "${env.SLACK_PREFIX} - ${environment}"
    
    def jobUrl = "https://jenkins.mseng.mlsrvr.com/view/EDU/job/edu_ci"
    def baseUrl = "${jobUrl}/${env.BUILD_NUMBER}/artifact/build/${ipAddress}"
    def logUrl = "${baseUrl}/${ipAddress}.log"
    def zipUrl = "${baseUrl}/edu-${ipAddress}.zip"
       
    def output
    def errors = 0
                         
    slackSend(channel: "${slackChannel}", message: "${labPrefix} Beginning test run.")

    try {
        withCredentials(
            [usernamePassword(credentialsId: credentialsId, passwordVariable: 'password', usernameVariable: 'username')
        ]) {
            output = bat(script: "powershell.exe -ExecutionPolicy Unrestricted -Command .\\build\\Invoke-RemoteTesting.ps1 -BuildNumber %BUILD_NUMBER% -LabIpAddress ${ipAddress} -Password %password% -Username %username% -EduZipFile .\\build\\edu.v%BUILD_NUMBER%.zip", returnStdout: true)
        }
    } catch (e) {
        handleLabFailure(credentialsId, ipAddress, labPrefix)
        throw e
    }
    
    archiveArtifacts(artifacts: "build/${ipAddress}/edu-${ipAddress}.zip")
    errors = output.tokenize().last() as Integer
    
    if (errors == 0) {                        
        slackSend channel: "${slackChannel}", color: 'good', message: "${labPrefix} Script completed successfully, view <${zipUrl}|EDU output file> for this lab."
    } else {   
        slackSend(channel: "${slackChannel}", color: 'danger', message: "${labPrefix} Script completed, but there are ${errors} errors in the logs, please review the <${zipUrl}|EDU output file> for this lab.")
        
        def errorMessage = "Errors found in ${environment} log output"
        error(errorMessage)
    }
}

pipeline {
    agent any
    parameters {
        string(name: 'branch', defaultValue: 'develop', description: '')
        string(name: 'slackChannel', defaultValue: 'edu-cicd', description: '')
        booleanParam(name: 'testOneEnabled', defaultValue: true, description: 'SingleDomain:2010:v2')
        booleanParam(name: 'testTwoEnabled', defaultValue: true, description: 'SingleDomain:2013/2016:v4:JML')
        booleanParam(name: 'testThreeEnabled', defaultValue: true, description: 'MultiDomain:2013:v4')
    }
    environment {
        SLACK_PREFIX = "#${env.BUILD_NUMBER} - [${branch}]"
        TEST_1 = '[SingleDomain:2010:v2]'
        TEST_2 = '[SingleDomain:2013/2016:v4:JML]'
        TEST_3 = '[MultiDomain:2013:v4]'
        TEST_1_IP = credentials('feab5ed9-07d6-4425-bf6a-2dca1c133647')
        TEST_2_IP = credentials('1754a6f7-f7d4-47b3-9063-60f4321eaf24')
        TEST_3_IP = credentials('4eaf24a2-579c-4339-a19a-ecc7634492fa')
    }
    stages {
        stage('Setup') {
            steps {
                slackSend channel: "${slackChannel}", message: "${SLACK_PREFIX} Starting new job."
                slackSend channel: "${slackChannel}", message: "${SLACK_PREFIX} <${env.BUILD_URL}|View build output>."

                checkout (
                    changelog: true,
                    poll: true,
                    scm: [ 
                        $class: 'GitSCM', 
                        branches: [[name: "master"]], 
                        doGenerateSubmoduleConfigurations: false, 
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'build\\tools']] + [[$class: 'CleanCheckout']],
                        submoduleCfg: [], 
                        userRemoteConfigs: [[credentialsId: 'james.blake', url: 'git@github.rackspace.com:MicrosoftEng/build-tools.git']]
                    ]
                )
            }
        }
        stage('Sign') {
            steps {
                slackSend channel: "${slackChannel}", message: "${SLACK_PREFIX} Signing script files."

                withCredentials([
                    usernamePassword(credentialsId: '1e14ecee-ea70-4dc9-b1a6-7946fab6c8bb', passwordVariable: 'password', usernameVariable: 'username'),
                    file(credentialsId: '9dc4abad-d55c-4621-a70c-d73b1803d6fe', variable: 'certificate'),
                ]) {
                    bat """powershell.exe -ExecutionPolicy Unrestricted -Command .\\build\\New-SignedFiles.ps1 -Password '%password%' -Username '%username%' -certificate %certificate%"""
                }
            }
        }
        stage('Zip') {
            steps {
                slackSend channel: "${slackChannel}", message: "${SLACK_PREFIX} Zipping files."

                bat 'powershell.exe -ExecutionPolicy Unrestricted -Command .\\build\\New-ZipFile.ps1 -BuildNumber %BUILD_NUMBER%'
            }
        }
        stage('Run Tests') {
            parallel {
                stage('SingleDomain:2010:v2') {
                    when {
                        expression { params.testOneEnabled == true }
                    }
                    steps {
                        script { invokeTest("03bbc260-f717-48f0-b16a-c97ba14e6d85", env.TEST_1, env.TEST_1_IP) }
                    }
                }
                stage('SingleDomain:2013/2016:v4:JML') {
                    when {
                        expression { params.testTwoEnabled == true }
                    }
                    steps {                    
                        script { invokeTest("5de43889-57c2-41ad-a17b-06cf6eb92ffd", env.TEST_2, env.TEST_2_IP) }
                    }
                }
                stage('MultiDomain:2013:v4') {
                    when {
                        expression { params.testThreeEnabled == true }
                    }
                    steps {
                        script { invokeTest("f344bfd0-63dd-4426-92dd-4e9016e0c526", env.TEST_3, env.TEST_3_IP) }
                    }
                }
            }
        }
    }
    post {
        success {		
            archiveArtifacts artifacts: "build/edu.v${env.BUILD_NUMBER}.zip"

            slackSend channel: "${slackChannel}", color: 'good', message: "${SLACK_PREFIX} All tests were successful (<${env.BUILD_URL}|View Build Output>)."
            slackSend channel: "${slackChannel}", color: 'good', message: "${SLACK_PREFIX} Distributable: (<https://jenkins.mseng.mlsrvr.com/view/EDU/job/edu_ci/${env.BUILD_NUMBER}/artifact/build/edu.v${env.BUILD_NUMBER}.zip|Download Distributable>)."
        }
        failure {
            slackSend channel: "${slackChannel}", color: 'danger', message: "${SLACK_PREFIX} One or more labs failed."
            slackSend channel: "${slackChannel}", message: "${SLACK_PREFIX} <${env.BUILD_URL}|View build output>."
            slackSend channel: "${slackChannel}", message: "${SLACK_PREFIX} <${env.BUILD_URL}/console|View console output>."
        }
        cleanup {
            slackSend channel: "${slackChannel}", message: "${SLACK_PREFIX} Job complete."
        }
    }
}
